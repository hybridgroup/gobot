---
title: Gobot API
author: The Hybrid Group
page_title: API
page_subtitle: "The Gobot API provides an interface for retrieving information and communicating with the currently running robots."
layout: documentation
page_title_show: true
active_menu_docs: true
breadcrumbs: "<li><a href='/documentation/api'>API Server</a></li>"
---
-content_for :bredcrumbs do
  = partial "/documentation/getting-started/breadcrumbs"

.api
  %h2  How To Connect
  %p Now you're ready to write code that will let you access your robots on a Gobot API server.
  %p Gobot includes a RESTful API to query the status of any robot running within a group, including the connection and device status, and execute device commands.
  %p 
    :markdown
      To activate the API, use the `Api` command like this:

          :::bash
          master := gobot.GobotMaster()
          gobot.Api(master)

      To specify the api port run your Gobot program with the `PORT` environment variable

          :::bash
          $ PORT=8080 go run gobotProgram.go
  
  %p 
    In order to use the 
    = link_to "robeaux", "https://github.com/hybridgroup/robeaux", target: "_blank" 
    AngularJS interface with Gobot you simply clone the robeaux repo and place it in the directory of your Gobot program. 
  %p 
    :markdown 
      The robeaux assets must be in a folder called `robeaux`.


  %h3  Running your robot:
  %p The following code example will spin up an API server:

  :markdown
        :::go
        package main

        import (  
          "fmt"
          "github.com/hybridgroup/gobot"
        )

        func Hello(params map[string]interface{}) string {
          name := params["name"].(string)
          return fmt.Sprintf("hi %v", name)
        }

        func main() {
          master := gobot.GobotMaster()
          gobot.Api(master)

          hello := new(gobot.Robot)
          hello.Name = "hello"
          hello.Commands = map[string]interface{}{"Hello": Hello}

          master.Robots = append(master.Robots, *hello)

          master.Start()
        }

    `robot.Start()` automatically starts up the API server.

  %h2 Routes
  %h3 GET /
  %p This route will serve up the Angular app bundled with Gobot, which can be used to view and control your robots and devices.

  %h3 GET /robots
  %p Our first route returns all the Robots the master class knows about in JSON format.
  :markdown
        :::bash
        [
          {
            "name": "SpheroBot",
            "connections": [
              {
                "name": "sphero",
                "port": "/dev/rfcomm0",
                "adaptor": "Sphero",
                "connection_id": 2778
              }
            ],
            "devices": [
              {
                "name": "sphero",
                "driver": "Sphero",
                "pin": null,
                "connection": {
                  "name": "sphero",
                  "port": "/dev/rfcomm0",
                  "adaptor": "Sphero",
                  "connection_id": 2778
                },
                "commands": [
                  "SetRGB",
                  "Roll",
                  "SetBackLED",
                  "Stop",
                  "SetHeading",
                  "GetRGB",
                  "SetStabilization"
                ]
              }
            ]
          }
        ]
  %h3 GET /robots/:robotname
  %p Given a robot's name, returns JSON information about the requested Robot:
  :markdown
        :::bash
        {
          "name": "SpheroBot",
          "connections": [
            {
              "name": "sphero",
              "port": "/dev/rfcomm0",
              "adaptor": "Sphero",
              "connection_id": 2778
            }
          ],
          "devices": [
            {
              "name": "sphero",
              "driver": "Sphero",
              "pin": null,
              "connection": {
                "name": "sphero",
                "port": "/dev/rfcomm0",
                "adaptor": "Sphero",
                "connection_id": 2778
              },
              "commands": [
                "SetRGB",
                "Roll",
                "SetBackLED",
                "Stop",
                "SetHeading",
                "GetRGB",
                "SetStabilization"
              ]
            }
          ]
        }
  %h3 GET /robots/:robotname/commands
  %p Given a robot's name, returns JSON information about the commands belonging to the requested Robot:
  :markdown
        :::bash
        [
          "SetRGB",
          "Roll",
          "SetBackLED",
          "Stop",
          "SetHeading",
          "GetRGB",
          "SetStabilization"
        ]
  %h3 POST /robots/:robotname/commands/:commandrobotname
  %p Given a robot name, commands, and command name, executes a robot's command and returns the result.
  :markdown
        :::bash
        {
          result: "successful"
        }
  %h3 GET /robots/:robotname/devices
  %p Given a robot's name, returns JSON information about the devices belonging to the requested Robot:
  :markdown
        :::bash
        [
          {
            "name": "sphero",
            "driver": "Sphero",
            "pin": null,
            "connection": {
              "name": "sphero",
              "port": "/dev/rfcomm0",
              "adaptor": "Sphero",
              "connection_id": 2778
            },
            "commands": [
              "SetRGB",
              "Roll",
              "SetBackLED",
              "Stop",
              "SetHeading",
              "GetRGB",
              "SetStabilization"
            ]
          }
        ]
  %h3 GET /robots/:robotname/devices/:devicename
  %p Given the names of a device and the robot it belongs to, returns data on the specified device.
  :markdown
        :::bash
        {
          "name": "sphero",
          "driver": "Sphero",
          "pin": null,
          "connection": {
            "name": "sphero",
            "port": "/dev/rfcomm0",
            "adaptor": "Sphero",
            "connection_id": 2778
          },
          "commands": [
            "SetRGB",
            "Roll",
            "SetBackLED",
            "Stop",
            "SetHeading",
            "GetRGB",
            "SetStabilization"
          ]
        }
  %h3 GET /robots/:robotname/devices/:devicename/commands
  %p Given the names of a device and the robot it belongs to, returns all commands available for the specified device.
  :markdown
        :::bash
        [
          "SetRGB",
          "Roll",
          "SetBackLED",
          "Stop",
          "SetHeading",
          "GetRGB",
          "SetStabilization"
        ]
  %h3 POST /robots/:robotname/devices/:devicename/commands/:command
  %p Given a robot name, device name, and command name, executes a robot's command and returns the result.
  :markdown
        :::bash
        {
          result: "successful"
        }

    