---
title: Gobot - ARDrone Driver
author: The Hybrid Group
page_title: ARDrone
page_subtitle: Driver
layout: documentation
page_title_show: true
subnav_driver: true
active_menu_docs: true
breadcrumbs: "<li><a href='/documentation/drivers/ardrone'>Ardrone</a></li>"

ardrone_platform: true
---
-content_for :bredcrumbs do
  = partial "/documentation/drivers/breadcrumbs"


%section.intro
  =image_tag "/images/devices/ardrone-flight.jpg", class: "display"
  .info-intro
    %p
      Allows user to send flight control commands to an ARDrone. Flight control commands are those used to tell the ARDrone to take off, land, and or any number of other autonomous flight manuvers.
  .clear
  
%section.how-to#HowToConnect
  %h2 How To Connect
  %p
    Communication with the ARDrone's flight control interface takes place using a WiFi connection. The ARDrone is a WiFi access point, so it normally can be the only device you connect to, without some additional effort to reconfigure the drone itself to put it into infrastructure mode.
  
  :markdown
        :::go
        package main

        import (
          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot-ardrone"
        )

        func main() {

          ardroneAdaptor := new(gobotArdrone.ArdroneAdaptor)
          ardroneAdaptor.Name = "Drone"

          drone := gobotArdrone.NewArdrone(ardroneAdaptor)
          drone.Name = "Drone"
        ...

%section.how-to#HowToUse
  %h2 How To Use
  %p 
    This example controls an ARDrone to take off, and then land.
  :markdown
        :::go
        package main

        import (
          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot-ardrone"
        )

        func main() {

          ardroneAdaptor := new(gobotArdrone.ArdroneAdaptor)
          ardroneAdaptor.Name = "Drone"

          drone := gobotArdrone.NewArdrone(ardroneAdaptor)
          drone.Name = "Drone"

          work := func() {
            drone.TakeOff()
            gobot.On(drone.Events["Flying"], func(data interface{}) {
              gobot.After("15s", func() {
                drone.Land()
              })
            })
          }

          robot := gobot.Robot{
            Connections: []gobot.Connection{ardroneAdaptor},
            Devices:     []gobot.Device{drone},
            Work:        work,
          }

          robot.Start()
        }

%section.public-methods
  .commands-api#Commands
    = partial "/documentation/drivers/partials/ardrone/commands_flight"
  .commands-api#Events
    = partial "/documentation/drivers/partials/ardrone/events_flight"

%section.compatability.hardware#Compatability
  %h2 Compatibility
  .devices
    = partial "documentation/partials/devices_platforms"
