---
page_title_show: true
title: Gobot - XBox360 Controller Driver
author: The Hybrid Group
page_title: XBox360 Controller
page_subtitle: Driver
layout: documentation
subnav_driver: true
active_menu_docs: true
breadcrumbs: "<li><a href='/documentation/drivers/xbox360'>XBox360 Controller</a></li>"

joystick_platform: true
---

-content_for :bredcrumbs do
  = partial "/documentation/drivers/breadcrumbs"


%section.intro
  =image_tag "/images/devices/xbox360.jpg", class: "display"
  .info-intro
    %p Allows user to interact with Artoo devices using a XBox360 game controller.
  .clear
  
%section.how_to#HowToConnect
  %h2 How To Connect
  :markdown
        :::go
        package main

        import (
          "fmt"
          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot-joystick"
        )

        func main() {
          joystickAdaptor := new(gobotJoystick.JoystickAdaptor)
          joystickAdaptor.Name = "xbox360"
          joystickAdaptor.Params = map[string]interface{}{
            "config": "./configs/xbox360_power_a_mini_proex.json",
          }

          joystick := gobotJoystick.NewJoystick(joystickAdaptor)
          joystick.Name = "xbox360"
        ...

%section.how-to#HowToUse
  %h2 How To Use
  %h3 Example receiving button events from XBox360 controller joystick.
  :markdown
        :::go
        package main

        import (
          "fmt"
          "github.com/hybridgroup/gobot"
          "github.com/hybridgroup/gobot-joystick"
        )

        func main() {
          joystickAdaptor := new(gobotJoystick.JoystickAdaptor)
          joystickAdaptor.Name = "xbox360"
          joystickAdaptor.Params = map[string]interface{}{
            "config": "./configs/xbox360_power_a_mini_proex.json",
          }

          joystick := gobotJoystick.NewJoystick(joystickAdaptor)
          joystick.Name = "xbox360"

          work := func() {
            gobot.On(joystick.Events["a_press"], func(data interface{}) {
              fmt.Println("a_press")
            })
            gobot.On(joystick.Events["a_release"], func(data interface{}) {
              fmt.Println("a_release")
            })
            gobot.On(joystick.Events["b_press"], func(data interface{}) {
              fmt.Println("b_press")
            })
            gobot.On(joystick.Events["b_release"], func(data interface{}) {
              fmt.Println("b_release")
            })
            gobot.On(joystick.Events["up"], func(data interface{}) {
              fmt.Println("up", data)
            })
            gobot.On(joystick.Events["down"], func(data interface{}) {
              fmt.Println("down", data)
            })
            gobot.On(joystick.Events["left"], func(data interface{}) {
              fmt.Println("left", data)
            })
            gobot.On(joystick.Events["right"], func(data interface{}) {
              fmt.Println("right", data)
            })
            gobot.On(joystick.Events["left_x"], func(data interface{}) {
              fmt.Println("left_x", data)
            })
            gobot.On(joystick.Events["left_y"], func(data interface{}) {
              fmt.Println("left_y", data)
            })
            gobot.On(joystick.Events["right_x"], func(data interface{}) {
              fmt.Println("right_x", data)
            })
            gobot.On(joystick.Events["right_y"], func(data interface{}) {
              fmt.Println("right_y", data)
            })
          }

          robot := gobot.Robot{
            Connections: []gobot.Connection{joystickAdaptor},
            Devices:     []gobot.Device{joystick},
            Work:        work,
          }

          robot.Start()
        }

%section.public-methods
  .commands-api#Commands
    %h1 Functions
    %p No commands
  .commands-api#Events
    = partial "/documentation/drivers/partials/joystick/events_xbox360"

%section.compatability.hardware#Compatability
  %h2 Compatibility
  .devices
    =# TODO: Update platform list at the top of the page.
    = partial "documentation/partials/devices_platforms"
